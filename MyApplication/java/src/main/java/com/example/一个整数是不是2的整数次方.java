package com.example;

/**
 * Created by DeanGuo on 10/16/16.
 *
 * 判断一个整数是不是2的整数次方
 *
 * 知识点:
 * &(与):任何数和0做与运算都得0  1&0=0,0&0=0
 * |(或):任何数和1做或运算都得1  0|1=1,1|1=1
 * ^(异或):相同得0,不同得1      0^0=0,0^1=1
 * <<(左位移):最右面补n个0         1010<<2=101000(x<<y,就是x乘以2的y次方)
 * >>(右位移):去调右面n个数,左面正数补0,负数补1  1010>>2=0010(x>>y:就是x除以2的y此方,取整数)
 *
 * 思路:
 * 一个整数如果是2的整数次方,那么它的二进制中只能有一个1。
 * 可以通过判断1的个数来确定是否为2的整数次方
 * 
 * 但更快捷的算法是将这个位置的1去掉,则这个数字就为0。
 * 依据就是一个整数减去1再和自己做与运算会将最右面的的1去掉(1100-1=1011, 1100&1011=1000)
 */

public class 一个整数是不是2的整数次方 {

    public static void main(String[] args) {
        System.out.println(is2Power(64));
    }

    private static boolean is2Power(int n) {
        return ((n-1)&n) == 0;
    }
}
